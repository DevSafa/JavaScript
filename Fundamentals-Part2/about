strict mode
    * is a special mode that we can activate in javascript , 
    wich make it easy for us to write a secure javascript code.
    * to activate strict mode , all we have to do is write  'use strict';
    * we activate the strict mode for the entire script 
    *'use strict'; has to be the very first statement in the script
    * if we have any code before it , then strict mode will not be activated  
    * we can only avctivate strict mode for a specific function or a block .
    *'use strict; to write more secure code 
    * secure means  that strict mode makes it easy for us developpers to void accident errors
        basically it avoid us to introduce bugs in our code and that because of two reasons:
        -first  strict mode forbid us to do certain things
        -second it  create visible errors in the developper console where  in certain situations without 
        strict mode javascript would simply fail silently .
    *another thing that strict mode does, is to introduce a short list of variable names that are reserved for features that may be added to the language a bit later.
--------------------------------------
Functions
* a functions is  simply a piece of code that we can reuse over and over  again in our 
    code.
*don't repeat yourself.
*console.log is also a function ,  a built -in function , that we don't have to built our-self.
-------------------------------------
Function Declarations vs expressions

    * functions are just values , so we can store them in variables 
    * what is the big difference between function declaration and function expression ?
        the main practical  difference is that we can actually call function declaration before where they defined in the code . 
        if we attempt to do the same thing with function expression , it should not work .
-----------------------------------
Arrow functions
    * is a third type of function that is addedd to javascript in ES6
    * arrow function is simply a special form of function expressions , that is shorter and faster to write .
----------------------------
Function Calling other functions
-----------------------------
Reviewing functions
    *different function types 

    function calcAge(birthYear){
        return 2037 - birthYear;
    }
    -->function declaration : function that can be used before it's declared

    const calcAge = function(birthYear){
        return 2037 - birthYear;
    }

    --> function expresison : essentially a function value stored in a variable

    const calcAge = birthYear => 2037 - birthYear

    -->arrow function : great for one quick one-line functions . Has no This keyword (more later ...)

    * three different ways of writing functioons , but they all work in a similar way : receive input data , transform data ,a nd then output data 

    *Parameters are placeholders to receive input values , Like local variables of a function
    *Function body : block of code that we want to reuse . Processes teh function's input.
    *Argument : actual values of function parameters , to input data .
    *Return statement : output a value from teh function and terminate execution
-------------------------------
Introduction to arrays

    *first data structure : arrays.
    *we use data structure to store data 
    *the two most important data structures at least in js are arrays and objects.
    *an array isn't a primitive value , so we can always change it(mutate) , even if we declare it with const keyword.
        what we cannot do is to replace the entire array.

------------------------------------
Basic array operations

    *js have some built in function that we can basically
     apply directly on arrays ,these are called methods.
    *we can think of methods as arry operations baasically.

    *add element to the end of an array : push()
        ->return : length of  the new array.
    *add element to the begening of an array : unshift()
        -> return : length of the new array
    * remove element from the end of array : pop()
        -> return : return the removed element
    *remove element from the begening of an array : shift()
        -> return : return the removed element
    * return the position of a certain elemnt in the array : indexOf()
        return -1 if not found
    * return true if the element is found in the array : includes()
        false if not found
------------------------------------
Coding challenge #2
----------------------------------------
Introduction to objects
    *after arrays , it's now time to learn about another data structuure in js
    which is Objects.
    *in Objects  we  actually defined key-value pairs
    *Objects are probably the most fundamental in the whole javascript language
    *there are many ways of creating objects (for example with curly braces )
        const jonas = {
            firstName: 'Jonas',
            lastName: 'Schmedtmann',
            age: 2037 - 1991,
            job : 'Teacher',
            friends: ['Michael', 'Peter', 'Steven']
        };
        the object litteral syntax (using curly braces)
    *to recape , just like arrays we use obkject to essentially group together different variables
        that really belong together, such as properties of Jonas.
    *the big difference between objects and arrays is that in object the order
        of the values does not matter at all when we want to retreive them .
    *in arrays the order in which we specify the elements matter a lot, because that's how we access the elements
    * we should use arrays for more order data , and objects for more unstructure data  and data that we actually want to name 
    and then retrive from the object based on that name .
-----------------------------------
Dot vs .Bracket Notation 
    *retreive data from object  and changing data in anobject using both the dot and bracket notation
    *when we need to first compute a property name then of course we have to use the bracket notation , in 
        other case use dot notation
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
    Member Access	        left-to-right	… . …
    Computed Member Access	left-to-right	… [ … ]
--------------------------------------
Object methods
    objects just like arrays , can hold different typeof data 
    and they can hold even arrays , and in fact they can even 
    hold objects inside objects.
    *functions are really just another type of values
    * and if a function is just a value  , that's means that we can create a key-value pair , where
        the value is a function 
    *that means that we can in fact add functions to objects
    *any function is attached to an object is called a method
    * a method is actually a property that hold a value 
    *in every method javascript give us access to a special variable
        called this.
    *the THis keyword or This variable is actually equal to the object on which the method 
        is called , it is equal the object calling the method.
    *arrays are actually also objects , they are just special kind of objects.
        so they have methods that we can use to manipulate them push() , pop() ,shift() ,unshift() ,includes()
