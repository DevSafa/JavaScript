*index.html is an html file because usually JavaScript is attached to web pages , 
    at lesat when we are building front end application.
* to start we always need an html document .
*in HTMl there is a script tag where we can write JavaScript

*developer console is just an environment that was built to execute small pieces of code
    and then shows results immediatly.

*whenever we want to access the developer console we use the console.log() function.
*console.log() is like building a bridge between our script  and the developer console on the other side.

<script>

     console.log(40 + 8 + 23 - 10);
</script>

*the script tag in HTMl page is an inline script
*an inline script is a script that is not loaded from an external file , but embedded inside HTML
*the only  advantage of inline script is we don't have to load another file ,
    but on the other hand is pretty bad for separating the web site content from teh javascript logic,
    so usually we use external javaScript files.
*connecting HTML file  to JavaScript file is usually done at the end using script tag 
    and specifying the src attribute to specify the path to js file.
*Linking a JavaScript file    
    <script src ="script.js" ></script>

-------------------------------------------------------------

Values and Variables
*a value is basically a piece of data , the most fundamental unit that we have in programming.
*a value is the smallest unit of information that we have in JavaScript
    'Jonas' is a value.
*we can store values in variables so we can reuse them over and over again.

*conventions and rules for naming variables
    -Camel case rule is a standard in JavaScript world
        Camel case (stylized as camelCase or CamelCase; also known as camel caps or more formally as medial capitals)
        is the practice of writing phrases without spaces or punctuation, indicating the separation of words with a 
        single capitalized letter, and the first word starting with either case.
    -we should not start a variable name with upper case letter.(it's just a convention not an error)
    -vaiables that are all in uppercase (convention )are reserved for constants that will never change .
    -make sure that variable names are descriptive.
*we can't name a variable like that (3years) -> it starts with a number
*all the errors that we make in our js code will end up in the console without using console.log() function .
*variables name cannot start with numbers ,
    in fact variable name can only contain numbers, letters , underscore or dollar sign.
    we can't name a variable using the reserved JavaScript keyword.
*let name = 'Jonas' , name is kind of a reserved keyword, but still legal to use.

------------------------------------------------
Data Types:
*in every programming language values can have different types depending on the type of data we want them to hold.
*we already saw strings and numbers. but there's actually more data types.
* in Javascript every value  is either :
    -an object which look something like :
        let me = {
            name : 'Jonas'
        };
    -a premetive value 
        let firstName = 'Jonas'
        let age = 30 ;
*the 7 prinmitive DatA Types:
    1-Number :Floating point Number , Used for decimals and integers --> let age = 23;
    2-String :Sequence of characters , Used for text --> let firstName = 'Jonas'
    3-Boolean :Logical type that can only be true or false , using for taking decision --> let fullAge = true;
    * Number , String , Boolean are the most used data type , but there are more ,...
    4-Undefined: Value taken by a variable that is not yet defined('empty value')  ('empty value') let children;
    5-NULL : also means 'empty value'
    6-Symbol (ES2015): value that is unique and cannot be changed (not useful for now)
    7-BigInt(ES2020):Larger integers than the Number can hold

*JavaScript has a feature called dynamic typing : we do not have to manually 
    define data type of the value stored in a variable . Instead data tYPE ARE determined automatically.
    in JavaScript Value has type , Not variable.
    -another application of dynamic typing is that later in our code we can assign  a new value with a different data type to the same variable without a problem

*javaScript programs are executed from top to bottom.
* typeof is a special operator just as (+) or (-) that can be used to show the type of a value.
*to craete a string we can use either double or single quote , the essential is using quotes.
    'Jonas' "Jonas"
    //error "Jonas'
    //error Jonas -> js taught that is a variable so , it will return a ReferenceError

-----------------------------------
* the three different ways of declaring variable in JavaScript
    - until this point we've always used let keyword to declare a variable
    - however there is also const and var .
    - let and const will introduced in ES6 , there are modern javascript.
    - var keyword is the old way to declare variables.
*when we need to mutate(reasigning)a variable , that's the perfect use case for using let , and that's also case for declaring empty variables.
* we use const keyword to declare a variables that not supposed to change at any point in the future.
*should i use  const or let to declare new variable?
    -as best practice for writing clean code , always recommend use const by 
    default and let only when you are really sure that the variable needs to be changed at some point in the future.
    -changing variables introduces potential to create bugs, erros in your code .
*var keyword should actually be completely avoided, however we should steel know how it works for legacy reasons.
-------------------------------
Basic operators
*an operator basically allows us to transform values or combine multiple values.
*there are many categories of operators : mathematique operators (arithmetique operators), comparaison operators, logical operators ,
    assignement operators, ....
*we use comparison operators to produce boolean values.

*the console  has access to all the variables in my .js file

*how does javaScript know if should do the math first or should do comaparaison first?
    -javaScript has some way of knowing that it should first do the arithemetic operation and then pass to the comparison .

------------------------------------
Precedence of different operators
    now - 1991 > now - 2018
    *why the two substructions  are executed before the comparison operator??
    *well it works this way because javascript has a way defined order of operator precedence,
        basically the order in which operators are executed.
    *to see the precedence of al the difference operators:
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence -->check the table

-------------------------------------
Strings and Template Literals

    *strings are very important part of programming , let's learn an easy way to build strings using
    somethings called template litterals.
    *starting from ES6 we can use template literales.
    * with template literales we can write a string in more normal way and then basically insert the variables directly into the strings,
     then they will simply being replaced.

    * to tell js that we want to use template literales we use `` -> back ticks
    * in order to tell js js that we are writing a template string we use back ticks
    * template string is the one  most used ES6 features.
    * we can use back ticks for any regular strings.
        console.log(`Just a regular string...`);
    *many developers actually started using back ticks for all strings, because 
        then you don't have to think about which quotation marks you should use,
        just use back ticks always.and then in case you need to insert a variable , then it's much 
        easier then to go back and switch out the regular quotes.
    * another great good use case of template literales is to create multilines strings.
-------------------------------------
Taking Decision _if _else Statements
    *an if else controle structure
    
    if (){

    }else {

    }
    *this structure allow us to have more controle over 
    the way that our code is executed. 
    the code does not execute in a linear way.
-----------------------------------------
Type conversion and Coercion

    -converting between types is something that we do in every programming language
    - for example converting a string to a number , or a number to a boolean ,... is something that we do all the time 
    - in java script there is type conversion  and type coercion .
    -type conversion is when we manually convert from one type to another .
        explicitly we convert from one type to another .
    -type coercion in javascript automatically convert type behind the scenes for us . 
    
    
    -we can basically convert strings to numbers by basically using the built in Number() function .
        -> the original value is actually not converted
    -javascript give us this  NaN (not a number ) value whenever an operation 
        that involves numbers fails to produce a new number 
    -basically NaN means invalid number .
    -String() and Number() functions needs to start with capital letter.
    -JavaScript can only converts to three types :
        -we can convert to a number , to a string or to a boolean 
        -but we cannot for example convert something to undefined , or to NULL
        -we saw how to convert to  a Number , and String  using Number() and String() functions .
    --> this is type conversion because we do it manaually .

    -javascript does type coercion automatically for us in  many situations 
    - type coercion happens whenever an operator is dealing with rwo values that have different types
        in that case javascript behind scenes will convert one the values to match the type of the other values,
        so that in the end the operation can be executed .
    - in java script the plus operator that we use triggers a coercion to Strings
    - whenever tehre is a n operation between strings  and the number , the number will be converted to a string .
    - the same happend in template literal , it takes all the number values , and also convert them to strings .
    - if java script does not have type coercion like many other languages  , then we would have  manually do this like we learned before.

    - actually not all the operators do type coercion to  string .
    - coercion is actually a great mechanism that allow us to write a lot less code 
        and also to write more readable code 

-----------------------------------------
Truthy and falsy values

- we talked about type conversion and coersion to numbers and to strings .
- but we didn't mention booleans yet , that's because we need to learn the concept of truthy and falsy values first .
- falsy values are values that are not exactly false but will become false when we try to convert them into a boolean .
- in javascript there only 5 falsy values  : 0 , '', undefined , null , NaN , and of corse itself is a lready false 
    -> all of this 5 values  will be converted to false when ewe attempt to convert them to a boolean .
    -> they are not exactly false initially but they will become when convert them to a boolean .
- that 's the definition of falsy values , everything else are called truthy values .
- any number that's not equal to zero and any string that is not an empty string will be converted to true when we attempt to convert them to boolean 
- we can use Boolean function to convert to boolean .

- in practice the conversion to boolean is always implicit not explicit , 
    or in other word is always type coersion that javascript automatically does behind scenes.
- but when exactly javascript does type coersion to booleans :
    ->it happens in two scenarions:
        -first when using logical operators
        - second in a logical context like when using if else  
-------------------------------------
Equality operators

* === is the comparaison operator
* === is called the strict equality operator 
* because it does not perform type coercion 
* === only return true if the both values are exactly the same .
------
*the loose equality operator (==)
* == does type coercion 
* = the assignement operator

*use of prompt() function for getting value from any web page .

* != is the loose version
* !== is the strict version

* in both cases equality and no equaltily make sure to use the strict version . (===  , !==)

-------------------------------------------
Boolean Logic 

* basically boolean logic is a branch of computer science which uses true and false values to solve complex logical problemes
 basic Boolean Logic : the AND , OR & NOT operators
* example
  -------
age = 14 
        * Boolean variables
        A : age is greater or equal 20 ->false
        B : age is less than 30 -> true
        * let's use operators
            * !A -> true
            * A AND B -> false
            * A OR B  -> true
            * !A AND B -> ->TRUE
            * A or B  ->false

------------------------------------------------
switch statement 
    * switch statement is an alternative way of writing a complicated 
        if-else statement when all we want to do is to compare one value to multiple different operations basically .
    *switch statemment does a strict comparaison 
    * switch is designed for equality  and not for like comparing staffs
    *it ' is technically possible to do that (comparaison ) , but that is not the goal of the switch statemnet 
------------------------------------------------
statements and Expressions
    * an expression is a piece of code that produces a value 
        * 3 + 4 is an expression , because it gonna produce a  value 
        * 1991  it still an expression 
        * true && false && !false is an expression , because at the end it will produca a boolean value 
    * a declaration is a complete sentence , and expression are like the words that make up the sentences
    * basically we write our whole program as a sequence of actions 
    * and this actions are statements .
    * a statement is like a bigger piece of code that is executed and does not produce a value .
        * if -else statement
        * switch statement
    *statements and expressions exist , expressions produce values,
         statements are like  full  sentences that translate our actions ; the actions that we want the program to perform .
    * basically whanever something ends with a semi-colon , that's is  stAtement  , it's like a complete sentence.

    * in  template litteral we can only insert expressions and not statements 

---------------------------------------------------
the conditional ternary operator
     *we already saw two ways of writing conditional : the regular if-else statement , switch statement 
    * the conditional operator : allow us to write something simelar to if-else statement but all in one line .
    *the conditional operator is also called the ternary operator , because it has 3 parts .
        the conditions + if part + else part 
    *conditional operator is an operator , and the operator always produce a value .
    * since a ternary operator is really an expression , we can use it in template eliteral , unlike if-else statement .
    * ternary operator is perfect when we just need to take a quicck decision .
    * we still need if-else statement when we have bigegr blocks of code that we need to execute base on a condition .